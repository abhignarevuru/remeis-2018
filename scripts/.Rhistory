install.packages("caret")
library(caret)
library(randomForest)
train_set <- read.csv("home/revuru/balancedTrain.csv")
train_set <- read.csv("home/balancedTrain.csv")
train_set <- read.csv("root/revuru/balancedTrain.csv")
library(readr)
balancedTrain <- read_csv("balancedTrain.csv")
View(balancedTrain)
train_set <- balancedTrain
rf_fit <- train(as.factor(class)~., data=train_set, method=ranger)
train_set$class <- as.factor(train_set$class)
train_set$class <- droplevels(train_set$class)
rf_fit <- train(as.factor(class)~., data=train_set, method=ranger)
struct(train_set$class)
head(train_set)
str(train_set$class)
rf_fit <- train(as.factor(class)~., data=train_set, method=rf)
rf_fit <- train(class~., data=train_set, method=rf)
rf_fit <- train(class~., data=train_set, method=rf)
na.omit(train_set)
str(train_set$class)
rf_fit <- train(class~., data=train_set, method=rf)
View(train_set)
View(train_set_raw)
q()
library(DMwR)
library(randomForest)
train_set_raw <- read.csv("/home/revuru/newTrain.csv")
prepareSMOTE <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
}
DBL <- prepareSMOTE(train_set_raw, "BL", 3300)
DCV <- prepareSMOTE(train_set_raw, "CV", 800)
DLM <- prepareSMOTE(train_set_raw, "LMXRB", 1600)
DLM <- prepareSMOTE(train_set_raw, "LMXRB", 1600)
DLM <- prepareSMOTE(train_set_raw, "LMXRB", 1600)
DLM <- prepareSMOTE(train_set_raw, "LMXRB", 1600)
DSTAR <- prepareSMOTE(train_set_raw, "STAR", 150)
DHM <- prepareSMOTE(train_set_raw, "HMXRB", 2400)
DS1 <- subset(train_set_raw, train_set_raw$class=="S1")
DULX <- prepareSMOTE(train_set_raw, "ULX", 3300)
DS2 <- prepareSMOTE(train_set_raw, "S2", 300)
train_set <- rbind(DBL, DCV, DLM, DHM, DS1, DS2, DSTAR, DULX)
train_set$class <- as.factor(train_set$class)
train_set$class <- droplevels(train_set$class)
training <- train_set
write.csv(training, "balancedTrain.csv")
trainBase <- data.frame(class=as.factor(class), threexmm_lii, threexmm_bii)
attach(training)
trainBase <- data.frame(class=as.factor(class), threexmm_bii, threexmm_lii)
write.csv(trainBase, "base.csv")
trainHR <- data.frame(cat3xmm_hr1,cat3xmm_hr2,cat3xmm_hr3,cat3xmm_hr4)
write.csv(trainHR, "hr.csv")
trainHRerror <- data.frame(cat3xmm_e_hr1,cat3xmm_e_hr2,cat3xmm_e_hr3,cat3xmm_e_hr4)
write.csv(trainHRerror, "hrError.csv")
trainStatExtras <- data.frame(cat3xmm_c,cat3xmm_ext,cat3xmm_extml,cat3xmm_flux8,cat3xmm_s)
write.csv(trainStatExtras, "statExtra.csv")
trainMWL	<- data.frame(a_ir1x,a_r1x,a_ox, a_gx)
write.csv(trainMWL, "mwl.csv")
trainWp3	<- data.frame(ffr, probability, power)
write.csv(trainWP3, "wp3.csv")
write.csv(trainWp3, "wp3.csv")
trainWp2	<- data.frame(bb_lc_fvar,bb_lc_ave,bb_lc_amplit,bb_lc_co_par1,bb_lc_dou_time, bb_lc_hal_time, bb_lc_fracthr)
write.csv(trainWp2, "wp2.csv")
base <- read.csv("~/base.csv")
View(base)
hr <- read.csv("~/hr.csv", header=FALSE)
View(hr)
hrError <- read.csv("~/hrError.csv", header=FALSE)
View(hrError)
mwl <- read.csv("~/mwl.csv", header=FALSE)
View(mwl)
wp2 <- read.csv("~/wp2.csv", header=FALSE)
View(wp2)
wp3 <- read.csv("~/wp3.csv")
View(wp3)
View(wp3)
wp3 <- read.csv("~/wp3.csv")
View(wp3)
hr <- read.csv("~hr.csv")
base <- read.csv("~/base.csv", header=FALSE)
wp3 <- read.csv("~/wp3.csv", header=FALSE)
library(DMwR)
library(randomForest)
train_par <- cbind(base,hr,hrError,mwl,wp2,wp3)
train_par$class <- as.factor(train_par$class)
str(train_par$class)
View(base)
base$class <- as.factor(base$class)
str(base$class)
balancedTrain <- read.csv("~/balancedTrain.csv", header=FALSE)
View(balancedTrain)
str(balancedTrain$class)
View(base)
str(base)
str(hr)
a <- cbind(base,hr)
str(a)
q()
library(DMwR)
train_set_raw <- read.csv("/home/revuru/newTrain.csv")
prepareSMOTE <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
}
DBL <- prepareSMOTE(train_set_raw, "BL", 3300)
DCV <- prepareSMOTE(train_set_raw, "CV", 800)
DULX <- prepareSMOTE(train_set_raw, "ULX", 3300)
DSTAR <- prepareSMOTE(train_set_raw, "STAR", 150)
DLM <- prepareSMOTE(train_set_raw, "LMXRB", 1600)
DHM <- prepareSMOTE(train_set_raw, "HMXRB", 2400)
DS1 <- subset(train_set_raw, train_set_raw$class=="S1")
DS2 <- prepareSMOTE(train_set_raw, "S2", 300)
35+4
3536+3564+3750+3502+3773+4104+3226+3910
29365/8
View(train_set_raw)
a <- cbind(train_\)
a <- cbind(train_set_raw$threexmm_srcid, train_set_raw$cat3xmm_source)
str(a)
View(a)
train_set <- rbind(DBL, DCV, DLM, DHM, DS1, DS2, DSTAR, DULX)
train_set$class <- as.factor(train_set$class)
train_set$class <- droplevels(train_set$class)
trainBase <- data.frame(class=as.factor(class), threexmm_lii, threexmm_bii)
attach(train_set)
trainBase <- data.frame(class=as.factor(class), threexmm_lii, threexmm_bii)
trainHR <- data.frame(cat3xmm_e_hr1,cat3xmm_e_hr2,cat3xmm_e_hr3,cat3xmm_e_hr4,cat3xmm_hr1,cat3xmm_hr2,cat3xmm_hr3,cat3xmm_hr4,cat3xmm_c,cat3xmm_ext,cat3xmm_extml,cat3xmm_flux8)
trainMWL	<- data.frame(a_ir1x,a_r1x,a_ox, a_gx)
trainWp3	<- data.frame(ffr, probability, power)
train_par <- cbind(trainBase, trainHR, trainMWL, trainWp3)
train_par$class <- as.factor(train_par$class)
fit <- randomForest(class~., data=train_par, importance=T, mtry=15, ntree=600, na.action=na.roughfix)
library(randomForest)
fit <- randomForest(class~., data=train_par, importance=T, mtry=15, ntree=600, na.action=na.roughfix)
print(fit)
library(DMwR);
uniquetrain_set_raw <- read.csv("/root/revuru/train_unique_cat3xmm_source.fits");
prepareSMOTE <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
};
train_unique_cat3xmm_source <- read.table("~/train_unique_cat3xmm_source.fits", quote="\"")
View(train_unique_cat3xmm_source)
uniquebaltrainset <- read.table("~/uniquebaltrainset.csv", header=TRUE, quote="\"")
View(uniquebaltrainset)
print(fit)
View(fit)
str(fit)
fit
save(fit, "nonuniqueoob.Rdata")
save(fit, "nonuniqueoob.RData")
save(fit, file="nonuniqueoob.RData")
?save
nonuniqueoob <- read.table("~/nonuniqueoob.RData", quote="\"")
View(nonuniqueoob)
install.packages("rlist")
library(rlist)
list.save(fit, "nonuniqueoob.rdata")
nonuniqueoob <- read.table("~/nonuniqueoob.rdata", quote="\"")
View(nonuniqueoob)
View(nonuniqueoob)
View(nonuniqueoob)
list.save(fit, "nonuniqueoob.json")
list.save(fit, "nonuniqueoob.rds")
nonuniqueoo <- read.delim("~/nonuniqueoob.rds", comment.char="#")
View(nonuniqueoo)
View(fit)
View(fit)
uniquebaltrainset <- read.table("~/uniquebaltrainset.csv", header=TRUE, quote="\"")
View(uniquebaltrainset)
View(train_set)
str(train_set)
str(train_set$cat3xmm_source)
str(train_set$cat3xmm_fvar)
library(dplyr)
nrow(train_set)
ncol(train_set)
nrow(distinct(train_set$cat3xmm_source))
nrow(distinct(train_set))
nrow(distinct(train_set_raw))
nrow(distinct(train_set_raw$cat3xmm_source))
nrow(distinct(train_set_raw, cat3xmm_source))
b <- nrow(distinct(train_set_raw, cat3xmm_source))
b <- distinct(train_set_raw, cat3xmm_source))
b <- distinct(train_set_raw, cat3xmm_source)
b <- distinct(train_set_raw, cat3xmm_source, .keep_all=TRUE)
write.csv(b, "uniqueDetTrainSet.csv")
uniqueDetTrainSet <- read.csv("~/uniqueDetTrainSet.csv", header=FALSE)
View(uniqueDetTrainSet)
View(uniqueDetTrainSet)
uniqueDetTrainSet <- read.csv("~/uniqueDetTrainSet.csv", header=TRUE)
uniqueDetTrainSet <- read.csv("~/uniqueDetTrainSet.csv")
View(uniqueDetTrainSet)
View(uniqueDetTrainSet)
str(b)
write.csv(b, "uniqueDetTrainSet.csv")
uniqueDetTrainSet <- read.csv("~/uniqueDetTrainSet.csv")
View(uniqueDetTrainSet)
library(DMwR);
uniquetrain_set_raw <- read.csv("/root/revuru/uniqueDetTrainSet.csv");
prepareSMOTE <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
};
uniquetrain_set_raw <- read.csv("~/uniqueDetTrainSet.csv")
uniquetrain_set_raw <- uniquetrain_set_raw[c(-1)]
View(uniquetrain_set_raw)
prepareSMOTE <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
};
DBL <- prepareSMOTE(uniquetrain_set_raw, "BL", 3300)
DCV <- prepareSMOTE(uniquetrain_set_raw, "CV", 800)
DCV <- prepareSMOTE(uniquetrain_set_raw, "CV", 800)
DCV <- prepareSMOTE(uniquetrain_set_raw, "CV", 800)
DCV <- prepareSMOTE(uniquetrain_set_raw, "CV", 800)
DCV <- prepareSMOTE(uniquetrain_set_raw, "CV", 800)
DLM <- prepareSMOTE(uniquetrain_set_raw, "LMXRB", 1600)
DHM <- prepareSMOTE(uniquetrain_set_raw, "HMXRB", 2400)
DS1 <- subset(uniquetrain_set_raw, uniquetrain_set_raw$class=="S1")
DS2 <- prepareSMOTE(uniquetrain_set_raw, "S2", 300)
DSTAR <- prepareSMOTE(uniquetrain_set_raw, "STAR", 150)
DULX <- prepareSMOTE(uniquetrain_set_raw, "ULX", 3300)
train_set <- rbind(DBL, DCV, DLM, DHM, DS1, DS2, DSTAR, DULX)
train_set$class <- as.factor(train_set$class)
train_set$class <- droplevels(train_set$class)
library(randomForest)
fit <- randomForest(class~., data=train_par, importance=T, mtry=15, ntree=600, na.action=na.roughfix)
View(train_par)
print(fit)
fit <- randomForest(class~., data=train_par, importance=T, mtry=9, ntree=600, na.action=na.roughfix)
print(fit)
q()
library(DMwR)
library(randomForest)
View(uniquetrain_set_raw)
newTrain <- read.csv("~/newTrain.csv")
View(newTrain)
newTrainUnique <- read.csv("~/newTrainUnique.csv")
View(newTrainUnique)
bb <- newTrainUnique[c(-1)]
library(randomForest)
library(DMwR)
library(DMwR)
library(randomForest)
#latitude only
train_raw <- read.csv("~newTrain.csv")
train_raw <- read.csv("/home/revuru/newTrain.csv")
balance <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
}
set <- read.csv("/home/revuru/newTrain.csv")
sset <- data.frame(set$threexmm_bii,set$threexmm_lii,set$class)
str(sset)
str(as.factor(set$class))
attach(sset)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=set.class)
ssubset <- sset[1:200]
ssubset <- sset[1:200,]
plot(ssubset.threexmm_bii, ssubset.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=ssubset.class)
set <- read.csv("/home/revuru/newTrain.csv")
set1 <- data.frame(set$threexmm_bii,set$threexmm_lii,set$class)
set2 <- set1[1:100,]
str(set2)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=set.class)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=set.class, pch=19)
legend(x="topright")
legend(x="topright", legend=levels(set2$set.class))
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=1)
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=19)
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=2)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=set.class, pch=19)
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=19)
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=19)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=set.class, pch=19)
legend(x="topright", legend=levels(set2$set.class), col=set.class, pch=18)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=19)
legend(x="topright", legend=levels(set2$set.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
plot(set.threexmm_bii, set.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(set2$set.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
xy <- read.csv("/home/revuru/newTrain.csv")
xy <- read.csv("/home/revuru/newTrain.csv")
xy1 <- data.frame(xy$threexmm_bii,xy$threexmm_lii,xy$class)
train_set_raw <- xy1[1:500,]
str(train_set_raw)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
train_set_raw <- xy1[1:5000,]
str(train_set_raw)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, inset=1)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, inset=0,2)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, inset=0.2)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, inset=2)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, bty="n", ncol=3)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18, ncol=3)
str(train_set_raw$xy.class)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=19, ncol=3)
plot(train_set_raw$xy.threexmm_bii, train_set_raw$xy.threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=18)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=19, ncol=3)
legend(x="topright", legend=levels(train_set_raw$xy.class), col=c("red","blue","green","black","yellow","grey","brown","pink"), pch=19)
plot(xy$threexmm_bii, xy$threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","blue","green","black","yellow","grey","brown","pink")[xy$class], pch=18)
plot(xy$threexmm_bii, xy$threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","blue","brown","grey","pink")[xy$class], pch=18)
plot(xy$threexmm_bii, xy$threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[xy$class], pch=18)
legend(x="topright", legend=levels(xy$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
str(xy)
plot(xy$threexmm_bii, xy$threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[xy$class], pch=18);
legend(x="topright", legend=levels(xy$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19);
xy <- read.csv("/home/revuru/newTrainUnique.csv")
train_set_raw <- data.frame(xy$threexmm_bii,xy$threexmm_lii,xy$class)
plot(xy$threexmm_bii, xy$threexmm_lii, xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[xy$class], pch=18);
legend(x="topright", legend=levels(xy$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19);
cos(0)
sin(1)
sinpi(1)
newTrain <- read.csv("~/newTrain.csv")
View(newTrain)
str(newTrain$threexmm_bii)
print(newTrain$threexmm_bii[1:100,])
print(newTrain$threexmm_bii[1:100])
print(newTrain$threexmm_bii)
print(max(newTrain$threexmm_bii))
print(min(newTrain$threexmm_bii))
cospi(30)
cos(30)
sin(30)
sinpi(30)
sinpi(0)
sinpi(90)
deg2rad <- function(deg) {(deg * pi) / (180)}
deg2rad(90)
deg2rad(180)
cos(deg2rad(90))
cospi(deg2rad(90))
cospi(deg2rad(90.0))
sinpi(deg2rad(90))
0.220584 - 0.975368
install.packages("sos", dependencies = TRUE); library(sos); findFn("convert degree to radian")
install.packages("NISTunits")
library(NISTunits)
NISTdegTOradian(90)
# Scatterplot of galactic latitude VS cos(galactic longitude) color-coded by class
library(NISTunits);
blah <- read.csv("/home/revuru/newTrain.csv");
cos_lii <- cospi(NISTdegTOradian(blah$threexmm_lii));
plot(blah$threexmm_bii, cos_lii, xlab="Galactic Latitude", ylab="Cosine of Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[blah$class], pch=18);
legend(x="topright", legend=levels(blah$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
# Scatterplot of galactic latitude VS cos(galactic longitude) color-coded by class
library(NISTunits);
blah <- read.csv("/home/revuru/newTrain.csv");
cos_lii <- cospi(NISTdegTOradian(blah$threexmm_lii));
plot(blah$threexmm_bii, cos_lii, xlab="Galactic Latitude", ylab="Cosine of Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[blah$class], pch=18);
legend(x="topright", legend=levels(blah$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
# Scatterplot of galactic latitude VS cos(galactic longitude) color-coded by class
library(NISTunits);
blah <- read.csv("/home/revuru/newTrain.csv");
cos_lii <- cospi(NISTdegTOradian(blah$threexmm_lii));
plot(blah$threexmm_bii, cos_lii, xlab="Galactic Latitude", ylab="Cosine of Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[blah$class], pch=18);
legend(x="topright", legend=levels(blah$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
plot(bluh$threexmm_bii, bluh$threexmm_lii, main="versus coordinates", xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[bluh$class], pch=18);
legend(x="topright", legend=levels(bluh$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19);
str(bluh)
str
str(bluh_raw)
library(DMwR)
library(NISTunits)
bluh_raw <- read.csv("/home/revuru/newTrain.csv");
bluh_raw <- read.csv("/home/revuru/newTrain.csv");
balance <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
};
DBL <- balance(bluh_raw, "BL", 3300);
DCV <- balance(bluh_raw, "CV", 800);
DLM <- balance(bluh_raw, "LMXRB", 1600);
DHM <- balance(bluh_raw, "HMXRB", 2400);
DS1 <- subset(bluh_raw, bluh_raw$class=="S1");
DS2 <- balance(bluh_raw, "S2", 300);
DSTAR <- balance(bluh_raw, "STAR", 150);
DULX <- balance(bluh_raw, "ULX", 3300);
library("tidyr", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.2")
detach("package:tidyr", unload=TRUE)
bluh <- rbind(DBL, DCV, DLM, DHM, DS1, DS2, DSTAR, DULX);
bluh$class <- as.factor(bluh$class);
bluh$class <- droplevels(bluh$class);
plot(bluh$threexmm_bii, bluh$threexmm_lii, main="versus coordinates", xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[bluh$class], pch=18);
legend(x="topright", legend=levels(bluh$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19);
cos_lii <- cospi(NISTdegTOradian(bluh$threexmm_lii));
plot(bluh$threexmm_bii, bluh$threexmm_lii, main="coordinates vs cos(coordinate)", xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[blah$class], pch=18);
plot(bluh$threexmm_bii, bluh$threexmm_lii, main="coordinates vs cos(coordinate)", xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[bluh$class], pch=18);
legend(x="topright", legend=levels(bluh$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
plot(bluh$threexmm_bii, cos_lii, main="coordinates vs cos(coordinate)", xlab="Galactic Latitude", ylab="Galactic Longitude", col=c("red","yellow","green","black","grey","brown","blue","pink")[bluh$class], pch=18);
legend(x="topright", legend=levels(bluh$class), col=c("red","yellow","green","black","grey","brown","blue","pink"), pch=19)
test <- read.table("~/scripts/test.fits", header=TRUE, quote="\"")
View(test)
install.packages("FITSio")
test <- read.table("~/scripts/test.fits", header=TRUE, quote="\"")
View(test)
library(FITSio)
readFITS("test.fits")
readFITS("~/scripts/test.fits")
test <- readFITS("~/scripts/test.fits")
header <- readFITSheader(test)
str(test)
zz <- file("test",open="rb")
zz <- file("test.fits",open="rb")
zz <- file("~/scripts/test.fits",open="rb")
str(zz)
print(zz)
header <- readFITSheader(zz)
header
header1 <- readFITSheader(zz)
header1
D <- readFITSbintable(zz, header1)
str(D)
close(zz)
str(header)
str(header1)
str(parseHdrheader1)
str(parseHdr(header1))
D$hdr[which(D$hdr=="BITPIX")+1]
D$colNames
D
D
setwd("~/scripts")
library(DMwR)
library(FITSio)
train_raw <- readFITS(file = "/home/revuru/scripts/newTrain.fits", hdu = 1)
features <- train_raw$colNames
features <- train_raw$colNames
train_raw <- train_raw$col
names(train_raw) <- features
train_raw <- as.data.frame(train_raw)
train_raw <- distinct(train_raw, train_raw$threexmm_srcid, .keep_all = TRUE)
library(dplyr)
train_raw <- distinct(train_raw, train_raw$threexmm_srcid, .keep_all = TRUE)
train_raw <- train_raw[1:7383,1:232]
balance <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
}
DBL <- balance(train_raw, "BL", 3300)
View(train_raw)
str(train_raw)
summarise(train_raw)
DBL <- balance(train_raw, "BL", 3300)
train_raw <- read.csv("/home/revuru/scripts/newTrain.csv")
balance <- function(rawdata, cname, percover){
temp <- rawdata
temp$class <- replace(as.character(temp$class), which(temp$class!=cname), paste("non", cname, sep = ""))
temp$class <- as.factor(temp$class)
smoting <- SMOTE(class~., temp, perc.over=percover, perc.under=100, k=5)
smoted <- subset(smoting, smoting$class==cname)
return(smoted)
}
DBL <- balance(train_raw, "BL", 3300)
train_ra <- readFITS(file = "/home/revuru/scripts/newTrain.fits", hdu = 1)
features <- train_ra$colNames
train_ra <- train_ra$col
names(train_ra) <- features
train_ra <- as.data.frame(train_ra)
train_ra <- distinct(train_ra, train_ra$threexmm_srcid, .keep_all = TRUE)
train_ra <- train_ra[1:7383,1:232]
train_raw <- train_ra
detach(train_ra)
close(train_ra)
EBL <- balance(train_raw, "BL", 3300)
EBL <- balance(train_raw, "BL", 3300)
